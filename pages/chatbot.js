import Head from "next/head";
import { useState, useEffect, useRef } from "react";
import axios from "axios";
import styles from '../styles/Ai.module.css'
import BottomNav from "@/Components/NavBarBottom";


export default function ChatBot() {

  const [botResponse, setBotResponse] = useState("");
  const [inputValue, setInputValue] = useState("");
  const [chatLog, setChatLog] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isThinking, setIsThinking] = useState(false);
  const chatLogContainerRef = useRef(null);


  const sendMessage = (message) => {
    const url = "https://api.openai.com/v1/chat/completions";
    const headers = {
      "Content-type": "application/json",
      Authorization: `Bearer ${process.env.NEXT_PUBLIC_API_KEY}`,
    };
    const keywords = ["scam", "fraud", "phishing", "blackmail", "deceit", "deception", "extortion", "hoax", "racket", "rip-off"]; 

    if (!keywords.some(keyword => message.toLowerCase().includes(keyword))) {
      setBotResponse("I'm sorry, I can only answer questions related to scams.");
      return;
    }
  
    const data = {
      model: "gpt-3.5-turbo-0301",
      messages: [{ role: "user", content: message }],
    };
  
    setIsLoading(true);
    setIsThinking(true); // set isThinking to true
    axios
      .post(url, data, { headers: headers })
      .then((response) => {
        console.log(response);
        setBotResponse(response.data.choices[0].message.content);
        setIsLoading(false);
        setIsThinking(false); // set isThinking to false when the response is received
      })
      .catch((error) => {
        setIsLoading(false);
        console.log(error);
      });
  };
  
  const handleSubmit = (event) => {
    event.preventDefault();

    setChatLog((prevChatLog) => [
      ...prevChatLog,
      { type: "user", message: inputValue },
    ]);

    sendMessage(inputValue);

    setInputValue("");
  };

  useEffect(() => {
    if (botResponse !== "") {
      setChatLog((prevChatLog) => [
        ...prevChatLog,
        { type: "bot", message: botResponse },
      ]);
      setBotResponse("");
    }
  }, [botResponse]);

  useEffect(() => {
    if (chatLogContainerRef.current) {
      chatLogContainerRef.current.scrollTop = chatLogContainerRef.current.scrollHeight;
    }
  }, [chatLog]);


  return (
    <>
      <Head>
        <title>Swindle</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/Layer_1(3).svg" />
      </Head>

      <main className={styles.main}>

        <div className={styles.logoholder}>
          <div>
            <img src="/LogoHorizontalWhite.svg" className={styles.logo}/>
          </div>
        </div>

        <div className={styles.robotholder}>
          <img src="/Asset_11.svg" className={styles.robot}/>
          {isLoading && <div className={styles.thinking}>I'm thinking...</div>}
        </div>
        
        <div className={styles.Container}>
          <div className={styles.scrollbar} ref={chatLogContainerRef}>
          {chatLog.map((message, index) => (
            <div
              key={index}
              className={
                message.type === "bot" ? styles.botMessage : styles.userMessage
              }
            >
              {message.message}
            </div>
          ))}
          </div>
          <form className={styles.form} onSubmit={handleSubmit}>
            <textarea
              className={styles.textArea}
              type="text"
              placeholder="Ask About Scams!"
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              disabled={isLoading} 
            />
            <button type="submit" className={styles.button}>
                Send
            </button>
          </form>
        </div>
        <BottomNav/>
      </main>
    </>
  );

}


